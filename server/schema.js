"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_1 = require("apollo-server");
exports.typeDefs = (0, apollo_server_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Query {\n    \"Query to get one user \"\n    user(id: ID!): User\n    \"Query to get one user by username\"\n    username(username: String!): User\n    \"Query to get all users registered with the app\"\n    users: [User!]\n    \"Query to get all projects monitored by the app\"\n    projects: [Project!]\n    \"Query to get specific project monitored by the app\"\n    project(id: ID!): Project\n    \"Query to get all history log for Production\"\n    historyLog: [Log!]\n    \"Query to get all history log for development in Playground\"\n    historyLogDev: [Log!]\n    \"Query all resolver execution metrics for a specified operation in history log for development with operation id\"\n    fieldLogs(operation_id: ID!): [FieldLog!]\n    \"Query all resolver execution metrics for a specified operation in history log for development with project id\"\n    projectFieldLogs(project_id: ID!): [FieldLog!]\n  }\n\n  type Mutation {\n    \"Mutation to create a user\"\n    createUser(username: String!, password: String!): CreateUserResponse!\n    \"Mutation to add a project, history log is default to empty array\"\n    addProject(project: ProjectInput!): Project!\n    \"Mutation to delete a project given an ID\"\n    deleteProject(id: ID!): Project!\n    \"Mutation to update a project given ProjectInput\"\n    updateProject(id: ID!, project: ProjectInput!): Project!\n    \"Mutation to change password\"\n    changePassword(userInput: ChangePasswordInput!): User!\n    \"Mutation to delete all history logs given the project Id\"\n    deleteHistoryLogs(id: ID!): [Log]\n    \"Mutation to delete all history log in development mode given the project Id\"\n    deleteHistoryLogsDev(id: ID!): [Log]\n    \"Mutation to delete all field logs from development mode related to a project given the project Id\"\n    deleteResolverLogsDev(id: ID!): [FieldLog]\n    \"Mutation to delete all field logs from development mode given the development operation id\"\n    deleteOperationResolverLogs(id: ID!): [FieldLog]\n  }\n\n  type CreateUserResponse {\n    \"Username that user submit when signing up\"\n    username: String!\n    \"JWT token that contain user's username info\"\n    token: String!\n  }\n\n  type User {\n    id: ID!\n    \"User's username, which is unique\"\n    username: String!\n    \"User's password\"\n    password: String!\n    \"User's list of projects\"\n    projects: [Project!]\n  }\n\n  type Project {\n    id: ID!\n    project_name: String!\n    \"the API key of this project\"\n    api_key: String!\n    \"Server URL where this project is running at\"\n    server_url: String!\n    \"Owner of this project\"\n    user: User!\n    \"All history log associated with this project\"\n    history_log: [Log]\n    \"All history log associated with this project (development)\"\n    history_log_dev: [Log]\n  }\n\n  type FieldLog {\n    id: ID!\n    \"Field name of query\"\n    resolver_name: String\n    \"Total query execution time for this field\"\n    execution_time: Int!\n    \"Operation that contains this resolver\"\n    operation: Log!\n    \"Status of this query\"\n    success: Boolean!\n  }\n\n  type Log {\n    id: ID!\n    \"Operation name of query\"\n    operation_name: String\n    \"Query submitted to the backend server\"\n    query_string: String!\n    \"Project where this query is submitted\"\n    project: Project!\n    \"Total query execution time\"\n    execution_time: Int!\n    \"Time at which query was submitted to server\"\n    created_at: String!\n    \"Status of this query\"\n    success: Boolean!\n  }\n\n  input ProjectInput {\n    project_name: String!\n    api_key: String\n    server_url: String!\n    userId: String\n  }\n\n  input ChangePasswordInput {\n    username: String!\n    oldPassword: String!\n    newPassword: String!\n  }\n"], ["\n  type Query {\n    \"Query to get one user \"\n    user(id: ID!): User\n    \"Query to get one user by username\"\n    username(username: String!): User\n    \"Query to get all users registered with the app\"\n    users: [User!]\n    \"Query to get all projects monitored by the app\"\n    projects: [Project!]\n    \"Query to get specific project monitored by the app\"\n    project(id: ID!): Project\n    \"Query to get all history log for Production\"\n    historyLog: [Log!]\n    \"Query to get all history log for development in Playground\"\n    historyLogDev: [Log!]\n    \"Query all resolver execution metrics for a specified operation in history log for development with operation id\"\n    fieldLogs(operation_id: ID!): [FieldLog!]\n    \"Query all resolver execution metrics for a specified operation in history log for development with project id\"\n    projectFieldLogs(project_id: ID!): [FieldLog!]\n  }\n\n  type Mutation {\n    \"Mutation to create a user\"\n    createUser(username: String!, password: String!): CreateUserResponse!\n    \"Mutation to add a project, history log is default to empty array\"\n    addProject(project: ProjectInput!): Project!\n    \"Mutation to delete a project given an ID\"\n    deleteProject(id: ID!): Project!\n    \"Mutation to update a project given ProjectInput\"\n    updateProject(id: ID!, project: ProjectInput!): Project!\n    \"Mutation to change password\"\n    changePassword(userInput: ChangePasswordInput!): User!\n    \"Mutation to delete all history logs given the project Id\"\n    deleteHistoryLogs(id: ID!): [Log]\n    \"Mutation to delete all history log in development mode given the project Id\"\n    deleteHistoryLogsDev(id: ID!): [Log]\n    \"Mutation to delete all field logs from development mode related to a project given the project Id\"\n    deleteResolverLogsDev(id: ID!): [FieldLog]\n    \"Mutation to delete all field logs from development mode given the development operation id\"\n    deleteOperationResolverLogs(id: ID!): [FieldLog]\n  }\n\n  type CreateUserResponse {\n    \"Username that user submit when signing up\"\n    username: String!\n    \"JWT token that contain user's username info\"\n    token: String!\n  }\n\n  type User {\n    id: ID!\n    \"User's username, which is unique\"\n    username: String!\n    \"User's password\"\n    password: String!\n    \"User's list of projects\"\n    projects: [Project!]\n  }\n\n  type Project {\n    id: ID!\n    project_name: String!\n    \"the API key of this project\"\n    api_key: String!\n    \"Server URL where this project is running at\"\n    server_url: String!\n    \"Owner of this project\"\n    user: User!\n    \"All history log associated with this project\"\n    history_log: [Log]\n    \"All history log associated with this project (development)\"\n    history_log_dev: [Log]\n  }\n\n  type FieldLog {\n    id: ID!\n    \"Field name of query\"\n    resolver_name: String\n    \"Total query execution time for this field\"\n    execution_time: Int!\n    \"Operation that contains this resolver\"\n    operation: Log!\n    \"Status of this query\"\n    success: Boolean!\n  }\n\n  type Log {\n    id: ID!\n    \"Operation name of query\"\n    operation_name: String\n    \"Query submitted to the backend server\"\n    query_string: String!\n    \"Project where this query is submitted\"\n    project: Project!\n    \"Total query execution time\"\n    execution_time: Int!\n    \"Time at which query was submitted to server\"\n    created_at: String!\n    \"Status of this query\"\n    success: Boolean!\n  }\n\n  input ProjectInput {\n    project_name: String!\n    api_key: String\n    server_url: String!\n    userId: String\n  }\n\n  input ChangePasswordInput {\n    username: String!\n    oldPassword: String!\n    newPassword: String!\n  }\n"])));
var templateObject_1;
//# sourceMappingURL=schema.js.map